name: Verify

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0
  COVERAGE_THRESHOLD: 80  # Add this to the job or workflow level env

permissions:
  id-token: write
  contents: read

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

      - name: Test frontend
        working-directory: frontend
        run: npm run test

  lint-terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        working-directory: infrastructure/terraform
        run: terraform fmt -check -recursive

      - name: tflint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: v0.44.1

      - name: Run tflint
        working-directory: infrastructure/terraform
        run: |
          tflint --init
          tflint --recursive

  lint-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: backend-go/go.sum

      - name: Generate GraphQL code
        working-directory: backend-go
        run: |
          go install github.com/99designs/gqlgen@latest
          go generate ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: backend-go
          args: --timeout=5m
          skip-cache: true

  build-frontend:
    needs: test-frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build
        working-directory: frontend
        run: npm run build

  test-backend:
    needs: lint-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: backend-go/go.sum

      - name: Generate GraphQL code
        working-directory: backend-go
        run: go run github.com/99designs/gqlgen generate

      - name: Run tests
        working-directory: backend-go
        run: |
          go test -v ./...

      - name: Run race tests
        working-directory: backend-go
        run: |
          go test -race ./...

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: backend-go/test-results/

      - name: Generate test coverage
        working-directory: backend-go
        run: |
          mkdir -p test-results
          go test -covermode=atomic -coverpkg=$(go list ./... | grep -v generated | tr '\n' ',') ./... -coverprofile=test-results/coverage.out | tee test-results/coverage.txt

      - name: Generate test coverage
        working-directory: backend-go
        run: |
          mkdir -p test-results
          # Run tests with coverage and enforce minimum threshold (e.g., 80%)
          go test -coverprofile=test-results/coverage.out -covermode=atomic -coverpkg=./... ./... | tee test-results/coverage.txt
          
          # Check if coverage meets threshold
          COVERAGE=$(go tool cover -func=test-results/coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          THRESHOLD=$COVERAGE_THRESHOLD
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "Code coverage $COVERAGE% is below threshold of $THRESHOLD%"
            exit 1
          fi
          
          # Generate HTML report
          go tool cover -html=test-results/coverage.out -o test-results/coverage.html

      - name: Upload coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            backend-go/test-results/coverage.out
            backend-go/test-results/coverage.html
            backend-go/test-results/coverage.txt

  verify-terraform:
    needs: lint-terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        if: github.actor != 'dependabot[bot]'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: infrastructure/terraform/environments/prod
        run: terraform init

      - name: Terraform Plan
        working-directory: infrastructure/terraform/environments/prod
        run: terraform plan -out=tfplan
        env:
          TF_VAR_project_name: ${{ secrets.TF_VAR_PROJECT_NAME }}
          TF_VAR_domain_name: ${{ secrets.TF_VAR_DOMAIN_NAME }}
          TF_VAR_frontend_domain: ${{ secrets.TF_VAR_FRONTEND_DOMAIN }}
          TF_VAR_api_domain: ${{ secrets.TF_VAR_API_DOMAIN }}

#  TODO work on terraform to make this work
#  security-scan:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Run Trivy vulnerability scanner
#        uses: aquasecurity/trivy-action@master
#        with:
#          scan-type: 'fs'
#          ignore-unfixed: true
#          format: 'table'
#          severity: 'CRITICAL,HIGH'
#
#      - name: Run tfsec
#        uses: aquasecurity/tfsec-action@v1.0.0
#        with:
#          working_directory: infrastructure/terraform

  verify-all:
    needs: [build-frontend, test-backend, verify-terraform]
    runs-on: ubuntu-latest
    steps:
      - name: Verification complete
        run: echo "All verification steps completed successfully"
